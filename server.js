const http = require('http');
const fs = require('fs');
const ping = require('net-ping');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑—ñ —Å–ø–∏—Å–∫–æ–º IP-–∞–¥—Ä–µ—Å
function readPrintersFile() {
    try {
        const printers = JSON.parse(fs.readFileSync('./data/printers.json'));
        return printers;
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–Ω—Ç–µ—Ä—ñ–≤:", error);
        return [];
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –¥–ª—è –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è
const session = ping.createSession();

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è IP-–∞–¥—Ä–µ—Å–∏
function pingHost(ip) {
    return new Promise((resolve, reject) => {
        session.pingHost(ip, function (error) {
            if (error) {
                console.log(ip + ": " + error.toString());
                resolve({ ip, status: false }); // –í—ñ–¥–º—ñ—á–∞—î–º–æ, —â–æ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
            } else {
                console.log(ip + ": Alive");
                resolve({ ip, status: true }); // –í—ñ–¥–º—ñ—á–∞—î–º–æ, —â–æ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–∏–º
            }
        });
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö IP-–∞–¥—Ä–µ—Å
async function pingAllHosts(ipAddresses) {
    const results = await Promise.all(ipAddresses.map(ip => pingHost(ip)));
    return results;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ —Ç–∞–±–ª–∏—Ü—ñ HTML
function updateTable(results) {
    let tableContent = '<table border="1"><tr><th>IP-–∞–¥—Ä–µ—Å–∞</th><th>–°—Ç–∞—Ç—É—Å</th></tr>';

    // –î–æ–¥–∞—î–º–æ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è
    results.forEach(({ ip, status }) => {
        console.log(`IP: ${ip}, –°—Ç–∞—Ç—É—Å: ${status ? "Online" : "Offline"}`);
        const lampIcon = status ? "üü¢" : "üî¥";
        tableContent += `<tr><td>${ip}</td><td>${lampIcon} ${status ? "Online" : "Offline"}</td></tr>`;
    });

    tableContent += '</table>';

    // –ó–∞–ø–∏—Å–∞—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π HTML-–∫–æ–Ω—Ç–µ–Ω—Ç —É —Ñ–∞–π–ª printer.html
    fs.writeFileSync('printer.html', tableContent, 'utf8', function(err) {
        if (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ —Ñ–∞–π–ª:', err);
        } else {
            console.log('–§–∞–π–ª printer.html —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.');
        }
    });
};

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const server = http.createServer(async function (req, res) {
    try {
        const ipAddresses = readPrintersFile(); // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å –∑ —Ñ–∞–π–ª—É
        const results = await pingAllHosts(ipAddresses); // –ü—ñ–Ω–≥—É—î–º–æ –≤—Å—ñ –∞–¥—Ä–µ—Å–∏
        updateTable(results); // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª printer.html');
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—ñ–Ω–≥—É–≤–∞–Ω–Ω—è:", error);
        res.writeHead(500, { 'Content-Type': 'text/plain' });
        res.end('500 Internal Server Error');
    }
});

// –ü—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—É 3000
server.listen(3000, 'localhost', function () {
    console.log('–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000/');
});
